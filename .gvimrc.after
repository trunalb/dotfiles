"General settings. NOTE : http://bit.ly/1418Uh8
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
map 0 ^

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.js :call DeleteTrailingWS()

"General settings End

" Buffers - explore/next/previous: Alt-F12, F12, Shift-F12.
 nnoremap <F7> :BuffergatorToggle<CR>
 nnoremap <F2> :NERDTreeToggle<CR>
 colorscheme solarized
 "syntax enable
 set guifont=Consolas:h12
 "set guifont=inconsolata:h11

 "map keys for switching split pane view
 " FIXME : cmd shift left is mapped to go to the start of the line so this does not
 " work
 "if has("gui_running")
 "  map <D-S-RIGHT> <C-w>l
 "  map <D-S-LEFT> <C-w>h
 "  map <D-S-DOWN> <C-w><C-w>
 "  map <D-S-UP> <C-w>W
 "  map <D-S-l> :echo 'trunal'
 "endif

" swipe gestures for MacVim
if has("gui_macvim")
    let macvim_hig_shift_movement = 1  
  "set guifont=Monaco:h10         " Monaco 10 is my favorite font
  "set noantialias                " Especially when it isn't aliased
"  nnoremap <SwipeLeft> :bprev<CR> " Swipeleft to change buffer
"  nnoremap <SwipeRight> :bnext<CR>

nnoremap <F3> :ZoomWin<CR>
nnoremap <Leader>r *Nciw

endif

" Mapping ESC in insert mode and command mode to double i
imap jj <C-[>
cmap jj <C-[>


" Map semi-colon to colon in command mode
map ; :

"easy navigation between split screens
map <Leader>j <C-W>j<C-W><Esc>
map <Leader>k <C-W>k<C-W><Esc>
map <Leader>h <C-W>h<C-W><Esc>
map <Leader>l <C-W>l<C-W><Esc>

"hide the toolbar by default
set guioptions-=T

"ignore files in CntrlP or Command-t
"The wildignore is being controlled by gitignore vim plugin
set wildignore+=*/node_modules/*,*/public/*,*/vendor/*

"NERDTree Ignore
let NERDTreeIgnore=['node_modules$[[dir]]', 'vendor$[[dir]]', 'dist$[[dir]]']

" Relative line numbers
set nonumber
set relativenumber

"automatically load configuration changes
"Taken from : http://bit.ly/ZWmncJ
"augroup myvimrc
    "au!
    "au BufWritePost .gvimrc.after so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
"augroup END


"code folding
"set foldmethod=indent   "fold based on indent
"set foldnestmax=10      "deepest fold is 10 levels
"set nofoldenable        "dont fold by default
"set foldlevel=1         "this is just what i use

set foldmethod=marker   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
"set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use
set foldmarker={,}

"Tried this one for js files. It works correctly if you have to just fold "functions" but does not work well for Backbone classes
"set foldmethod=syntax
"set foldlevelstart=1
"let javaScript_fold=1         " JavaScript

nnoremap <space> za
vnoremap <space> za

"Dash Settings
    let g:dash_map = {
        \ 'javascript' : 'backbone'
        \ }

"EasyMotion Settings
"let g:EasyMotion_leader_key = '<Leader>'
"let g:EasyMotion_leader_key = ','


"ctrlp settings
map <Leader>t :CtrlP<CR>

"things for XCode begin
"export PYTHONPATH=/Library/Python/2.7/site-packages:$PYTHONPATH
" Disable auto completion, always <c-x> <c-o> to complete
"let g:clang_complete_auto = 0 
"let g:clang_use_library = 1
"let g:clang_periodic_quickfix = 0
"let g:clang_close_preview = 1

"" For Objective-C, this needs to be active, otherwise multi-parameter methods won't be completed correctly
"let g:clang_snippets = 1

"" Snipmate does not work anymore, ultisnips is the recommended plugin
"let g:clang_snippets_engine = 'ultisnips'

"" This might change depending on your installation
"let g:clang_exec = '/usr/bin/clang'
"let g:clang_library_path = '/usr/lib/libclang.dylib'


"let g:syntastic_enable_signs=1
"" Read the clang complete file
"let g:syntastic_objc_config_file = '.clang_complete'

"" Status line configuration
"set statusline+=%#warningmsg#  " Add Error ruler.
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"nnoremap <silent> ` :Errors<CR>

"" Tell it to use clang instead of gcc
"let g:syntastic_objc_checker = 'clang'

"things for XCode end


"ctags settings
"set tags=./tags,tags;/
